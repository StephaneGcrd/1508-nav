{"version":3,"sources":["navigation/helpers.js","navigation/NavComponents.jsx","navigation/Nav.jsx","App.js","serviceWorker.js","index.js"],"names":["useWindowSize","isClient","window","getSize","width","innerWidth","undefined","height","innerHeight","useState","windowSize","setWindowSize","useEffect","handleResize","addEventListener","func","wait","immediate","timeout","context","this","args","arguments","later","apply","callNow","clearTimeout","setTimeout","debounce","removeEventListener","NavElement","name","className","SideMenu","children","closeFn","onClick","SvgCloseBtn","x1","y1","x2","y2","stroke","strokeWidth","SvgBurgerMenu","Nav","logo","sideNavElement","setCn","cn","size","isMobile","setMobile","isMenuActive","toggleMenuVisibility","hideMenu","withAnimation","sideMenu","Fragment","ReactDOM","createPortal","Logo","App","myRef","useRef","currentRef","setRef","current","console","log","ref","Boolean","location","hostname","match","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.5a3de1de.chunk.js","sourcesContent":["import { useState, useEffect } from \"react\";\n\n// Custom Hook to retrieve the size of the windwos\nfunction useWindowSize() {\n  const isClient = typeof window === \"object\";\n\n  function getSize() {\n    return {\n      width: isClient ? window.innerWidth : undefined,\n      height: isClient ? window.innerHeight : undefined\n    };\n  }\n\n  const [windowSize, setWindowSize] = useState(getSize);\n\n  useEffect(() => {\n    if (!isClient) {\n      return false;\n    }\n\n    function handleResize() {\n      setWindowSize(getSize());\n    }\n\n    // Here, use a debounce so the resize event doesn't trigger too fast\n    // This highly improve performances !\n    window.addEventListener(\"resize\", debounce(handleResize, 200));\n    return () => window.removeEventListener(\"resize\", handleResize);\n  }, []); // Empty array ensures that effect is only run on mount and unmount\n\n  return windowSize;\n}\n\n// Debounce function helper\n// Block a function from being called for a certain amount of time\nfunction debounce(func, wait, immediate) {\n  var timeout;\n  return function() {\n    var context = this,\n      args = arguments;\n    var later = function() {\n      timeout = null;\n      if (!immediate) func.apply(context, args);\n    };\n    var callNow = immediate && !timeout;\n    clearTimeout(timeout);\n    timeout = setTimeout(later, wait);\n    if (callNow) func.apply(context, args);\n  };\n}\n\nexport { useWindowSize };\n","import React from \"react\";\n\n// Contains an element for the nav, like a button\nconst NavElement = ({ name }) => {\n  return <div className=\"nav-element\">{name}</div>;\n};\n\n// Side menu for mobile\nconst SideMenu = ({ children, closeFn }) => {\n  return (\n    <div className={\"nav-side\"}>\n      <div className=\"nav-side-close\" onClick={() => closeFn(false)}>\n        <SvgCloseBtn />\n      </div>\n      {children}\n    </div>\n  );\n};\n\n// Logo of the app\nconst NavLogo = () => {\n  return <div className=\"nav-element nav-logo\">1508 Nav</div>;\n};\n\nconst SvgCloseBtn = () => (\n  <svg width=\"15\" height=\"15\">\n    <line x1=\"0\" y1=\"0\" x2=\"15\" y2=\"15\" stroke=\"white\" strokeWidth=\"2\" />\n    <line x1=\"0\" y1=\"15\" x2=\"15\" y2=\"0\" stroke=\"white\" strokeWidth=\"2\" />\n  </svg>\n);\n\nconst SvgBurgerMenu = () => (\n  <svg width=\"15\" height=\"15\">\n    <line x1=\"0\" y1=\"2\" x2=\"15\" y2=\"2\" stroke=\"white\" strokeWidth=\"2\" />\n    <line\n      x1=\"0\"\n      y1={15 / 2}\n      x2=\"15\"\n      y2={15 / 2}\n      stroke=\"white\"\n      strokeWidth=\"2\"\n    />\n    <line x1=\"0\" y1={13} x2=\"15\" y2={13} stroke=\"white\" strokeWidth=\"2\" />\n  </svg>\n);\n\nexport { NavElement, SideMenu, NavLogo, SvgBurgerMenu };\n","import React, { useState, useEffect } from \"react\";\nimport { useWindowSize } from \"./helpers\";\n\nimport ReactDOM from \"react-dom\";\nimport { SvgBurgerMenu, SideMenu } from \"./NavComponents\";\n\nconst Nav = ({ logo, children, sideNavElement, setCn, cn }) => {\n  const size = useWindowSize(); // Custom Hook to get the window size\n\n  const [isMobile, setMobile] = useState(false);\n  const [isMenuActive, toggleMenuVisibility] = useState(false);\n\n  const showMenu = () => {\n    toggleMenuVisibility(true);\n    setCn(\"push\");\n  };\n\n  const hideMenu = withAnimation => {\n    if (withAnimation) setCn(\"hide\"); // If animation, add the className hide to trigger the hiding animation\n    setTimeout(\n      () => {\n        toggleMenuVisibility(false); // Delete side-nav of the DOM after the animation\n        setCn(\"\");\n      },\n      withAnimation ? 290 : 0 // If no Animation, directly delete the side-nav\n    );\n  };\n\n  // Here, useEffect is called whenever the size change\n  useEffect(() => {\n    if (size && size.width < 600) {\n      setMobile(true);\n    } else {\n      setMobile(false);\n      hideMenu(isMenuActive ? true : false);\n    }\n\n    return () => {};\n  }, [size.width]);\n\n  // Wrap the childrens in the SideMenu element\n  const sideMenu = (\n    <SideMenu\n      closeFn={() => {\n        hideMenu(true);\n      }}\n      cn={cn}\n    >\n      {children}\n    </SideMenu>\n  );\n\n  return (\n    <React.Fragment>\n      <div className=\"nav-wrapper\">\n        <div className={isMobile ? \"nav mobile\" : \"nav\"}>\n          {logo}\n          {isMobile ? (\n            <div\n              className=\"nav-element burger-menu\"\n              onClick={() => {\n                showMenu();\n              }}\n            >\n              <SvgBurgerMenu />\n            </div>\n          ) : null}\n\n          {/* If not mobile, display the childrens in the NavBar */}\n          {!isMobile && <div>{children}</div>}\n        </div>\n      </div>\n\n      {isMenuActive &&\n        isMobile &&\n        ReactDOM.createPortal(sideMenu, sideNavElement)\n      // If the menu have to be shown (mobile), push it to the React portal\n      }\n    </React.Fragment>\n  );\n};\n\nexport default Nav;\n","import React, { useRef, useEffect, useState } from \"react\";\n\nimport \"./App.css\";\n\nimport Nav from \"./navigation/Nav\";\n\nimport { NavElement } from \"./navigation/NavComponents\";\n\nfunction App() {\n  const myRef = useRef(null);\n  const [currentRef, setRef] = useState(null);\n\n  const [cn, setCn] = useState(\"\");\n\n  useEffect(() => {\n    setRef(myRef.current);\n    console.log(currentRef);\n\n    return () => {};\n  }, []); // Empty array ensures that effect is only run on mount and unmount\n\n  return (\n    <React.Fragment>\n      <div ref={myRef} className={\"sidemenuwrap \" + cn} />\n      <div className={\"App \" + cn}>\n        <Nav logo={<Logo />} sideNavElement={currentRef} setCn={setCn} cn={cn}>\n          <NavElement name=\"Work\" />\n          <NavElement name=\"About\" />\n          <NavElement name=\"Contact\" />\n        </Nav>\n        <div className=\"content\">\n          <div className=\"text-block\">\n            <h4>Lorem Ipsum</h4>\n            Lorem ipsum dolor sit amet, consectetur adipiscing elit. Quisque sed\n            mattis quam. Cras venenatis ut erat ut egestas. Ut euismod molestie\n            elementum. Mauris ullamcorper fringilla commodo. Ut sed vestibulum\n            diam, fermentum tincidunt enim. Vestibulum ante eros, pulvinar vel\n            pretium eleifend, vehicula sit amet magna. Etiam fermentum metus non\n            eros facilisis, posuere posuere dui porttitor. <br />\n            <br /> Ut condimentum volutpat ultrices. Aenean tincidunt tellus\n            imperdiet, malesuada neque sit amet, dignissim sem. Vivamus dui\n            quam, imperdiet sit amet mi at, fringilla semper leo. Interdum et\n            malesuada fames ac ante ipsum primis in faucibus. Quisque et mauris\n            consequat, molestie nisl nec, finibus enim. Maecenas at elementum\n            odio, ac faucibus dui. Aliquam scelerisque sollicitudin elit, id\n            convallis sapien vulputate non. Ut sit amet tincidunt mauris.\n            Integer rutrum erat ac lorem porttitor dictum.\n            <br />\n            <br />\n            Quisque condimentum massa a tortor scelerisque dignissim. Proin\n            dictum erat in convallis pharetra. Vivamus imperdiet vestibulum\n            arcu, sit amet malesuada purus. Pellentesque suscipit imperdiet\n            molestie. Praesent aliquet, mauris eget sagittis pretium, leo sem\n            commodo felis, auctor ultrices massa diam ac magna. Sed sed\n            fringilla urna. Integer tempus leo nunc, vel condimentum lorem\n            semper id. Integer faucibus nibh sed nisl tempus, sed faucibus eros\n            fringilla. Mauris viverra varius ex, sit amet pretium justo\n            facilisis quis. <br />\n            <br /> Proin id ornare orci. Cras sit amet tellus eleifend,\n            porttitor nisl a, suscipit metus. Nullam cursus blandit tortor, ac\n            viverra lorem vehicula ut. Maecenas vitae sagittis ipsum. Duis in\n            ipsum mattis, maximus dolor nec, consequat turpis. Duis ut pharetra\n            augue. Phasellus volutpat vitae augue eu blandit. Quisque efficitur\n            auctor libero ut suscipit.\n            <br />\n            <br />\n            Phasellus rutrum nulla augue, ut imperdiet ligula blandit vel.\n            Interdum et malesuada fames ac ante ipsum primis in faucibus.\n            Vestibulum faucibus euismod laoreet. Cras vestibulum justo in\n            dignissim laoreet. Donec interdum pulvinar interdum. Proin nec\n            tristique sapien. Quisque vitae purus non est pellentesque congue\n            lacinia at velit. Duis sagittis nisl purus, sed suscipit arcu congue\n            at. Morbi feugiat, neque et pellentesque dictum, quam ligula\n            fringilla risus, sit amet tempus mi tortor sed erat. <br />\n            <br /> Nunc a leo ligula. Nullam nec diam ex. Donec tincidunt purus\n            a leo pellentesque facilisis id eget tellus. Pellentesque sit amet\n            aliquet risus. Morbi vel viverra neque, non interdum tellus. Class\n            aptent taciti sociosqu ad litora torquent per conubia nostra, per\n            inceptos himenaeos. Mauris sit amet nunc sit amet nulla porta\n            egestas. Praesent id justo vestibulum,\n            <br />\n            <br />\n            fermentum ante sit amet, rhoncus est. Mauris iaculis nunc placerat\n            purus interdum, sed posuere tellus ornare. Duis lacinia ultricies\n            dapibus. Morbi tempus dolor at magna feugiat laoreet.\n            <br />\n            <hr />\n            Stéphane Guichard ©️\n            <br />\n            <br />\n          </div>\n        </div>\n      </div>\n    </React.Fragment>\n  );\n}\n\nconst Logo = () => {\n  return <div className=\"nav-element nav-logo\">1508 Nav</div>;\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}